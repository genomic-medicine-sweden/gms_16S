// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    taco Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    db                         = null

    // reads                   = null
    sample_size                = null
    seqtype                    = "map-ont"
    min_abundance              = 0.0001
    minimap_max_alignments     = 50
    minibatch_size             = 500000000
    keep_read_assignments      = true
    keep_files                 = false
    output_unclassified        = true

    // master html
    master_template            = "${projectDir}/assets/master_template.html"

    //cutadapt
    FW_primer                  = null
    RV_primer                  = null
    cutadapt_min_overlap       = 3
    cutadapt_max_error_rate    = 0.1
    retain_untrimmed           = false
    skip_cutadapt              = false
    save_intermediates         = false

    // porechop_abi
    adapter_trimming           = false

    // filtlong filtering
    quality_filtering          = true
    longread_qc_qualityfilter_minlength = 1200
    longread_qc_qualityfilter_maxlength = 1800
    longread_qc_qualityfilter_min_mean_q = 94

    //Save the trimmed reads
    save_preprocessed_reads    = false

    //Save the merged reads
    save_merged_reads          = true

    // krona
    run_krona                  = true
    krona_taxonomy_tab         = "${projectDir}/assets/databases/krona/taxonomy/taxonomy.tab"

    // For barcode folders
    merge_fastq_pass           = null
    barcodes_samplesheet       = null

    // References
    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    publish_dir_overwrite      = false
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    //schema_ignore_params       = 'genomes'
    schema_ignore_params       = ''


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load genomic-medicine-sweden/taco custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/taco.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/taco profiles: ${params.custom_config_base}/pipeline/taco.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    full { includeConfig 'conf/full.config' }
    cmd { includeConfig 'conf/cmd.config' }
}


// Load igenomes.config if required
//if (!params.igenomes_ignore) {
//    includeConfig 'conf/igenomes.config'
//} else {
//    params.genomes = [:]
//}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
params.trace_timestamp = trace_timestamp
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'genomic-medicine-sweden/taco'
    author          = """@fwa93""" // The author field is deprecated from Nextflow version 24.10.0, use contributors instead
    contributors    = [
        [
            name: 'Frans Wallin',
            affiliation: 'Department of Laboratory medicine, Clinical Microbiology, Örebro University Hospital, Örebro, Sweden.',
            email: 'frans.wallin@regionorebrolan.se',
            github: 'https://github.com/fwa93',
            contribution: ['author', 'maintainer']
        ],
        [
            name: 'Samuel Lampa',
            affiliation: 'Karolinska University Hospital, Stockholm, Sweden',
            email: 'samuel.lampa@scilifelab.se',
            github: 'https://github.com/samuell',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0000-0001-6740-9212'
        ],
        [
            name: 'Ryan J Kennedy',
            affiliation: 'Centre for Molecular Diagnostics, Lund University Hospital, Lund, Region Skåne, Sweden',
            email: 'ryan.kennedy@skane.se',
            github: 'https://github.com/ryanjameskennedy',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0000-0002-5084-5832'
        ],
        [
            name: 'Sofia Stamouli',
            affiliation: 'Karolinska Institutet, Clinical Genomics Stockholm, Karolinska University Hospital, Stockholm, Sweden',
            email: 'sofia.stamouli@scilifelab.se',
            github: 'https://github.com/sofstam',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0009-0006-0893-3771'
        ],
        [
            name: 'Markus H Johansson',
            affiliation: 'Centre for Molecular Diagnostics, Lund University Hospital, Lund, Region Skåne, Sweden',
            email: 'markus.h.johansson@skane.se',
            github: 'https://github.com/mhkc',
            contribution: ['contributor'],
            orcid: 'https://orcid.org/0000-0001-8485-9143'
        ],
        [
            name: 'Olivia Andersson',
            affiliation: 'Clinical Genomics, Faculty of Medicine and Health, Örebro University, Örebro, Sweden',
            email: 'olivia.andersson@regionorebrolan.se',
            github: 'https://github.com/AnderssonOlivia',
            contribution: ['contributor']
        ],
    ]
    homePage        = 'https://github.com/genomic-medicine-sweden/taco'
    description     = """A nextflow pipeline for the EMU tool from treangenlab."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
