/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: MERGE_BARCODES {
        publishDir = [
            path: { "${params.outdir}/fastq_pass_merged" },
            mode: params.publish_dir_mode,
            pattern: 'fastq_pass_merged'
        ]
    }


    withName: MERGE_BARCODES_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/fastq_pass_merged" },
            mode: params.publish_dir_mode,
            pattern: 'fastq_pass_merged'
//            pattern: '*fastq.gz'
        ]
    }

    withName: GENERATE_INPUT {
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            pattern: 'samplesheet_merged.csv'
        ]
    }

    withName: NANOPLOT1 {
        publishDir = [
            path: { "${params.outdir}/nanoplot" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,log,png,txt,yml}'
        ]
        ext.prefix = { "${meta.id}_nanoplot_unprocessed" }                                  // A closure can be used to access variables defined in the script

    }

    withName: NANOPLOT2 {
        publishDir = [
            path: { "${params.outdir}/nanoplot_processed_reads" },
            mode: params.publish_dir_mode,
            pattern: '*.{html,log,png,txt,yml}'
        ]
        ext.prefix = { "${meta.id}_nanoplot_processed" }                   // A closure can be used to access variables defined in the script

    }


    withName: PORECHOP_ABI {
        publishDir = [
            path: { "${params.outdir}/porechop_abi" },
            mode: params.publish_dir_mode,
            pattern: '*.{log,yml}'
        ]
    }




    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }




    withName: FASTQC {
        ext.args = '--quiet'
    }




    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
    withName: EMU_ABUNDANCE {
        publishDir = [
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                pattern: '*{.tsv,txt}'
            ],
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                pattern: '*{.sam}',
                enabled: params.keep_files,
            ],
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                pattern: '*{.fa}',
                enabled: params.output_unclassified
            ],

        ]

        ext.args = [
            "--type ${params.seqtype}",
            "--db ${params.db}",
            "--output-dir ./",
            "--min-abundance ${params.min_abundance}",
            "--N ${params.minimap_max_alignments}",
            "--K ${params.minibatch_size}",
            "--keep-counts",
            params.keep_read_assignments ? "--keep-read-assignments" : "",
            params.keep_files ? "--keep-files" : "",
            params.output_unclassified ? "--output-unclassified" : "",
        ].join(' ')                                                           // Join converts the list here to a string.
        ext.prefix = { "${meta.id}" }                                         // A closure can be used to access variables defined in the script

    }
    withName: KRONA_KTIMPORTTAXONOMY {
        ext.args = [
        "-i",
        "-t 1",
        "-m 14",
        ].join(' ')                                                           // Join converts the list here to a string.
        ext.prefix = { "${meta.id}_krona" }
        publishDir = [
            path: { "${params.outdir}/krona/" },
            mode: params.publish_dir_mode,
            pattern: '*.{html}'
        ]
    }
    withName: FILTLONG {
        ext.args = [
            "--min_length ${params.longread_qc_qualityfilter_minlength}",
            "--max_length ${params.longread_qc_qualityfilter_maxlength}",
            "--min_mean_q ${params.longread_qc_qualityfilter_min_mean_q}"

        ]
        .join(' ').trim()
        //ext.prefix = { "${meta.id}_${meta.run_accession}_filtered" }
        ext.prefix = { "${meta.id}_filtered" }

        publishDir = [
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }
}
