/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        overwrite: params.publish_dir_overwrite,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: MERGE_BARCODES {
        publishDir = [
            path: { "${params.outdir}/fastq_pass_merged" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: 'fastq_pass_merged',
            enabled: params.save_merged_reads
        ]
    }

    withName: MERGE_BARCODES_SAMPLESHEET {
        publishDir = [
            path: { "${params.outdir}/fastq_pass_merged" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: 'fastq_pass_merged',
            enabled: params.save_merged_reads
        ]
    }

    withName: GENERATE_INPUT {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: 'samplesheet_merged.csv'
        ]
    }

    withName: GENERATE_MASTER_HTML {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
        ]
    }

    withName: NANOPLOT_UNPROCESSED_READS {
        publishDir = [
            path: { "${params.outdir}/nanoplot_unprocessed" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: '*.{html,log,png,txt,yml}'
        ]
        ext.prefix = { "${meta.id}_nanoplot_unprocessed_" }                                  // A closure can be used to access variables defined in the script
        ext.when = { params.seqtype == "map-ont" }

    }

    withName: NANOPLOT_PROCESSED_READS {
        publishDir = [
            path: { "${params.outdir}/nanoplot_processed" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: '*.{html,log,png,txt,yml}'
        ]
        ext.prefix = { "${meta.id}_nanoplot_processed_" }                   // A closure can be used to access variables defined in the script
        ext.when = { params.seqtype == "map-ont" }

    }

    withName: PORECHOP_ABI {
        publishDir = [
            path: { "${params.outdir}/porechop_abi" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: '*.{log,yml}'
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUTADAPT {
        ext.args = { [
        "--minimum-length 1",
        "-O ${params.cutadapt_min_overlap}",
        "-e ${params.cutadapt_max_error_rate}",
        // Use primers from the samplesheet if available, otherwise fall back to params
        meta.fw_primer ? "-g ${meta.fw_primer}" : (params.FW_primer ? "-g ${params.FW_primer}" : ''),
        meta.rv_primer ? "-G ${meta.rv_primer}" : (params.RV_primer ? "-G ${params.RV_primer}" : ''),
        params.retain_untrimmed ? '' : "--discard-untrimmed"
        ].findAll { it }.join(' ').trim() } // Remove empty strings and join arguments

        ext.prefix = { "${meta.id}.trimmed" }

        publishDir = [
            [   path: { "${params.outdir}/cutadapt" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: "*.log"
            ],
            [   path: { "${params.outdir}/cutadapt/trimmed_reads" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: "*.trim.fastq.gz",
                enabled: params.save_intermediates
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: '*_versions.yml'
        ]
    }

    withName: EMU_ABUNDANCE {
        publishDir = [
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: '*{.tsv,txt}'
            ],
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: '*{.sam}',
                enabled: params.keep_files,
            ],
            [
                path: { "${params.outdir}/results" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: '*.{fastq_unclassified_mapped.fasta,fastq_unmapped.fasta}',
                enabled: params.output_unclassified
            ],

        ]

        ext.args = [
            "--type ${params.seqtype}",
            "--db ${params.db}",
            "--output-dir ./",
            "--min-abundance ${params.min_abundance}",
            "--N ${params.minimap_max_alignments}",
            "--K ${params.minibatch_size}",
            "--keep-counts",
            params.keep_read_assignments ? "--keep-read-assignments" : "",
            params.keep_files ? "--keep-files" : "",
            params.output_unclassified ? "--output-unclassified" : "",
        ].join(' ')                                                           // Join converts the list here to a string.
        ext.prefix = { "${meta.id}" }                                         // A closure can be used to access variables defined in the script
    }

    withName: KRONA_KTIMPORTTAXONOMY {
        ext.args = [
        "-i",
        "-t 1",
        "-m 14",
        ].join(' ')                                                           // Join converts the list here to a string.
        ext.prefix = { "${meta.id}_krona" }
        publishDir = [
            path: { "${params.outdir}/krona" },
            mode: params.publish_dir_mode,
            overwrite: params.publish_dir_overwrite,
            pattern: '*.{html}'
        ]
    }

    withName: FILTLONG {
        ext.args = [
            "--min_length ${params.longread_qc_qualityfilter_minlength}",
            "--max_length ${params.longread_qc_qualityfilter_maxlength}",
            "--min_mean_q ${params.longread_qc_qualityfilter_min_mean_q}"
        ]
        .join(' ').trim()
        //ext.prefix = { "${meta.id}_${meta.run_accession}_filtered" }
        ext.prefix = { "${meta.id}_filtered" }

        publishDir = [
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: '*.fastq.gz',
                enabled: params.save_preprocessed_reads
            ],
            [
                path: { "${params.outdir}/filtlong" },
                mode: params.publish_dir_mode,
                overwrite: params.publish_dir_overwrite,
                pattern: '*.log'
            ]
        ]
    }
}
